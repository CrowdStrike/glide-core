name: On Pull Request Opened And Synchronize

on:
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - CONTRIBUTING.md
      - LICENSE
      - README.md

env:
  CI: true

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  install_dependencies:
    name: Install
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm

  format:
    name: Format
    runs-on: macos-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm format
        env:
          NODE_ENV: production

  lint:
    name: Lint
    runs-on: macos-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          NODE_ENV: production
      - run: pnpm lint
        env:
          NODE_ENV: production

  typecheck:
    name: Typecheck
    runs-on: macos-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm typecheck
        env:
          NODE_ENV: production

  test:
    name: Test
    runs-on: macos-latest
    # Something has gone wrong if our tests take longer than 10 minutes.
    timeout-minutes: 10
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm test
        env:
          NODE_ENV: production
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: dist/coverage/

  approve_snapshot_changes:
    name: Approve Snapshot Changes
    runs-on: ubuntu-latest
    if: ${{ failure() && contains(needs.test_visuals.result, 'failure') }}
    needs: test_visuals
    # TODO: better name for environment and workflow
    environment: update-snapshots
    steps:
      - name: Approved
        run: write-host "Approve for ..."

  update_snapshots:
    name: Snapshots
    needs:
      - approve_snapshot_changes
    if: ${{ failure() && contains(needs.test_visuals.result, 'failure') }}
    uses: ./.github/workflows/update-snapshots.yml
    secrets: inherit
    with:
      environment: update-snapshots

  fetch_snapshots:
    name: Fetch Snapshots
    runs-on: ubuntu-latest
    steps:
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - run: aws s3 sync s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/snapshots ./snapshots --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: actions/upload-artifact@v4
        with:
          path: snapshots
          name: visual-test-snapshots-existing

  test_visuals:
    name: Test (Visuals)
    runs-on: ubuntu-latest
    # Increase sharding if it takes longer than 10 minutes.
    timeout-minutes: 10
    needs:
      - install_dependencies
      - fetch_snapshots
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        shardTotal: [10]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - uses: actions/download-artifact@v4
        with:
          path: dist/snapshots
          name: visual-test-snapshots-existing
      - name: Test
        id: test
        run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Upload Report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-report-${{ matrix.shardIndex }}
          path: blob-report
      - uses: ././.github/actions/update-snapshots
        if: steps.test.outcome == 'failure'
        with:
          environment: update-snapshots

  deploy-visual-test-report:
    name: Deploy Report
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [test_visuals]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: visual-test-report
          pattern: visual-test-report-*
      - run:
          npx playwright merge-reports --reporter html ./visual-test-report
          # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy
        run: aws s3 sync ./playwright-report s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }}/visual-test-report --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: visual-test-report
          message: |+
            ## Visual Test Report
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/visual-test-report

  build:
    name: Build
    runs-on: macos-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          BASE_URL: ${{ github.head_ref }}
          NODE_ENV: production
      - uses: actions/upload-artifact@v4
        with:
          name: storybook
          path: dist/storybook

  deploy:
    name: Deploy
    # Ubuntu instead of MacOS because the performance difference is
    # negligible and Ubuntu includes the AWS CLI.
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/download-artifact@v4
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy
        run: aws s3 sync ./storybook s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }} --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: storybook
          message: |+
            ## Storybook
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}
