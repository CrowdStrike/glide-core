name: On Pull Request Opened And Synchronize

on:
  pull_request:
    types: [opened, synchronize]
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash -eu -o pipefail {0}

jobs:
  install-dependencies:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm

  fetch-playwright-baseline-screenshots:
    name: Fetch Playwright Baseline Screenshots
    runs-on: ubuntu-latest
    steps:
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - run: aws s3 sync s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/playwright-baseline-screenshots ./playwright-baseline-screenshots --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - name: Upload Playwright Baseline Screenshots
        uses: actions/upload-artifact@v4
        with:
          path: playwright-baseline-screenshots
          name: playwright-baseline-screenshots

  format:
    name: Format
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm format
        env:
          NODE_ENV: production

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          NODE_ENV: production
      - run: pnpm lint
        env:
          NODE_ENV: production

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm typecheck
        env:
          NODE_ENV: production

  test-web-test-runner:
    name: Test (Web Test Runner)
    # https://github.com/CrowdStrike/glide-core/pull/529#discussion_r1886905184
    runs-on: macos-latest
    # Something has gone wrong if the job takes longer than 10 minutes.
    timeout-minutes: 10
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm dlx playwright@1.52.0 install --only-shell --with-deps chromium
      - run: pnpm test:production:web-test-runner
      - name: Upload Web Test Runner Coverage Report
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: web-test-runner-coverage
          path: dist/web-test-runner-coverage
      - name: Upload Web Test Runner Debugging Screenshots
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: web-test-runner-debugging-screenshots
          path: dist/web-test-runner-debugging-screenshots

  test-all-but-visuals:
    name: Test (All But Visuals)
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Increase sharding if the job takes longer than this
    needs:
      - install-dependencies
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        shardTotal: [10]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm dlx playwright@1.52.0 install --no-shell --with-deps chromium firefox webkit
      - name: Test
        id: test
        run: pnpm exec playwright test --grep-invert visuals --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Upload Coverage Report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-coverage-${{ matrix.shardIndex }}
          path: dist/playwright/coverage

  verify-test-coverage-and-deploy-report:
    name: Verify Test Coverage And Deploy Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: ${{ !cancelled() }}
    needs:
      - test-all-but-visuals
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - name: Download Test Coverage Reports
        uses: actions/download-artifact@v4
        with:
          path: .
          pattern: playwright-coverage-*
      - run: pnpm start:production:typescript
      - run: node ./dist/playwright/merge-coverage-reports.js
        id: verify
        continue-on-error: true
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy Report
        run: aws s3 cp ./playwright-coverage/index.html s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }}/test-coverage-report/index.html --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@52423e01640425a022ef5fd42c6fb5f633a02728
        with:
          header: test-coverage-report
          message: |+
            ## ${{ steps.verify.conclusion == 'failure' && '⚠️' || '✅' }} Test Coverage Report
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/test-coverage-report

  test-visuals:
    name: Test (Visuals)
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Increase sharding if the job takes longer this
    needs:
      - install-dependencies
      - fetch-playwright-baseline-screenshots
    outputs:
      failed: ${{ steps.get-test-job-outcome.outputs.failed }}
    strategy:
      # We need every job in the matrix to finish so we can produce a full report.
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        shardTotal: [10]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm dlx playwright@1.52.0 install --only-shell --with-deps chromium
      - name: Download Playwright Baseline Screenshots
        uses: actions/download-artifact@v4
        with:
          path: dist/playwright-baseline-screenshots
          name: playwright-baseline-screenshots
      - name: Test
        id: test
        # Failing would add quite a bit of time to CI. It would also add complexity, both
        # for developers and to this workflow.
        #
        # To do it, we'd have to hack up GitHub's staged deployments feature to require
        # an approval of the visual changes. After they're approved, we'd update the
        # screenshots on R2. Then we'd force a re-run of this job so it passes for the
        # branch in question. Lastly, after merge, we'd have to synchronize the
        # screenshots again in case another branch was merged in the meantime and
        # overwrote them.
        #
        # So we simply expect the developer and reviewers to look over the test report,
        # deployed below, before merging.
        continue-on-error: true
        run: pnpm exec playwright test --grep @visuals --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Get "Test" Job Outcome
        id: get-test-job-outcome
        run: |
          if [ "${{ steps.test.outcome }}" == "failure" ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          fi
      - name: Upload Blob Report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-report-blob-${{ matrix.shardIndex }}
          path: blob-report

  deploy-visual-test-report:
    name: Deploy Visual Test Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: ${{ !cancelled() }}
    needs:
      - test-visuals
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - name: Download Blob Reports
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: visual-test-report-blob
          pattern: visual-test-report-blob-*
      - name: Merge Blob Reports
        run: |
          PLAYWRIGHT_HTML_ATTACHMENTS_BASE_URL=https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref  }}/visual-test-report/data/ pnpm exec playwright merge-reports --reporter html ./visual-test-report-blob
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy Report
        run: aws s3 sync ./playwright-report s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }}/visual-test-report --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@52423e01640425a022ef5fd42c6fb5f633a02728
        with:
          header: visual-test-report
          message: |+
            ## ${{ needs.test-visuals.outputs.failed && '⚠️' || '✅' }} Visual Test Report
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/visual-test-report

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          BASE_URL: ${{ github.head_ref }}
          NODE_ENV: production
      - name: Upload Storybook
        uses: actions/upload-artifact@v4
        with:
          name: storybook
          path: dist/storybook

  deploy-storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    # Both `github.head_ref` and `github.event.pull_request.head.ref` are empty when
    # a workflow is run in a merge queue. Take a look at the Deploy Storybook task
    # below. Because those variables will be empty, letting that task run in a merge
    # queue means the branch will be deployed to the root of R2 and thus to production.
    # The point of this job is the Deploy Storybook task. So we just skip the entire job.
    if: github.event_name != 'merge_group'

    needs:
      - build
    steps:
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Download Storybook
        uses: actions/download-artifact@v4
        with:
          name: storybook
          path: storybook
      - name: Deploy Storybook
        run: aws s3 sync ./storybook s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref  }} --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@52423e01640425a022ef5fd42c6fb5f633a02728
        with:
          header: storybook
          message: |+
            ## Storybook
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref  }}
