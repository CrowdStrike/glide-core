name: On Pull Request Opened And Synchronize

on:
  pull_request:
    types: [opened, synchronize]

env:
  CI: true

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  install_dependencies:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm

  format:
    name: Format
    runs-on: ubuntu-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm format
        env:
          NODE_ENV: production

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          NODE_ENV: production
      - run: pnpm lint
        env:
          NODE_ENV: production

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm typecheck
        env:
          NODE_ENV: production

  test:
    name: Test
    runs-on: ubuntu-latest
    # It's possible our tests can hang and we don't want to blow through our
    # GitHub Action minutes, so we'll timeout after 10 minutes to prevent
    # that from happening.
    timeout-minutes: 10

    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      # TODO
      #
      # Change to `pnpm test` when we switch to a MacOS runner or back to the
      # Ubuntu one.
      #
      # https://github.com/ericclemmons/per-env/issues/9
      - run: pnpm test:production
        env:
          NODE_ENV: production

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - install_dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          BASE_URL: ${{ github.head_ref }}
          NODE_ENV: production
      - uses: actions/upload-artifact@v4
        with:
          path: dist/storybook

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - install_dependencies
      - build
    steps:
      - uses: actions/download-artifact@v4
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}

        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy
        run: aws s3 sync ./artifact s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }} --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |+
            ## Preview URL
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}
