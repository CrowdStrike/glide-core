name: On Pull Request Opened And Synchronize

on:
  pull_request:
    types: [opened, synchronize]
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash -eu -o pipefail {0}

jobs:
  install-dependencies:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm

  fetch-baseline-screenshots:
    name: Fetch Baseline Screenshots
    runs-on: ubuntu-latest
    steps:
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - run: aws s3 sync s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/playwright-baseline-screenshots ./dist/playwright-baseline-screenshots --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        with:
          name: baseline-screenshots
          path: ./dist/playwright-baseline-screenshots

  format:
    name: Format
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm format
        env:
          NODE_ENV: production

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          NODE_ENV: production
      - run: pnpm lint
        env:
          NODE_ENV: production

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm typecheck
        env:
          NODE_ENV: production

  test-lint-rules:
    name: Test (Lint Rules)
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start:production:typescript
      - run: pnpm exec playwright test --config ./src/playwright/playwright.config.ts --project "lint rules"
        env:
          PLAYWRIGHT_NO_WEBSERVER: true
  test:
    name: Test (Unmigrated)
    # https://github.com/CrowdStrike/glide-core/pull/529#discussion_r1886905184
    runs-on: macos-latest
    # Something has gone wrong if the job takes longer than 10 minutes.
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm dlx playwright@1.54.2 install --only-shell --with-deps chromium
      - run: pnpm test:production:web-test-runner

  test-functionality:
    name: Test (Functionality)
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
      - build
    outputs:
      failed: ${{ steps.get-test-job-outcome.outputs.failed }}
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        shardTotal: [10]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - name: Download Storybook
        uses: actions/download-artifact@v4
        with:
          name: storybook
          path: ./dist/storybook
      - run: pnpm dlx playwright@1.54.2 install --no-shell --with-deps chromium firefox webkit
      - name: Test
        id: test
        run: pnpm exec playwright test --config ./src/playwright/playwright.config.ts --project functionality --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
        continue-on-error: true
      - name: Get "Test" Job Outcome
        id: get-test-job-outcome
        run: |
          if [ "${{ steps.test.outcome }}" == "failure" ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          fi
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.shardIndex }}
          path: dist/playwright/coverage-report
      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ matrix.shardIndex }}
          path: ./dist/playwright/test-report

  verify-and-deploy-test-report:
    name: Verify And Deploy Test Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    needs:
      - test-functionality
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - name: Download Test Reports
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./dist/playwright/test-reports
          pattern: test-report-*
      - name: Merge Test Reports
        run: |
          PLAYWRIGHT_HTML_ATTACHMENTS_BASE_URL=https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref  }}/test-report/data/ PLAYWRIGHT_HTML_TITLE="Test Report" pnpm exec playwright merge-reports --config ./src/playwright/playwright.config.ts --reporter html ./dist/playwright/test-reports
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy Test Report
        run: aws s3 sync ./playwright-report s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }}/test-report --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@52423e01640425a022ef5fd42c6fb5f633a02728
        with:
          header: test-report
          message: |+
            ## ${{ needs.test-functionality.outputs.failed && '⚠️' || '✅' }} Test Report
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/test-report#?q=s:${{ needs.test-functionality.outputs.failed && 'failed+s:flaky' || 'passed' }}
      - name: Report Test Failure
        if: ${{ needs.test-functionality.outputs.failed == 'true' }}
        run: |
          echo One or more tests failed. See the report:
          echo
          echo https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/test-report#?q=s:${{ needs.test-functionality.outputs.failed && 'failed+s:flaky' || 'passed' }}
          exit 1

  verify-and-deploy-coverage-report:
    name: Verify And Deploy Coverage Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    needs:
      - test-functionality
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - name: Download Coverage Reports
        uses: actions/download-artifact@v4
        with:
          path: ./dist/playwright
          pattern: coverage-report-*
      - name: Merge Coverage Reports
        id: merge
        run: pnpm exec tsx ./src/playwright/merge-coverage-reports/run.ts ${{ github.head_ref }}
        continue-on-error: true
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy Coverage Report
        run: aws s3 sync ./dist/playwright/coverage-report s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }}/coverage-report --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@52423e01640425a022ef5fd42c6fb5f633a02728
        with:
          header: coverage-report
          message: |+
            ## ${{ steps.merge.outcome == 'failure' && '⚠️' || '✅' }} Coverage Report
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/coverage-report
      - name: Report Insufficient Coverage
        if: ${{ steps.merge.outcome == 'failure' }}
        run: |
          echo Insufficient test coverage. See the report:
          echo
          echo https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/coverage-report
          exit 1

  test-visuals:
    name: Test (Visuals)
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
      - fetch-baseline-screenshots
    outputs:
      failed: ${{ steps.get-test-job-outcome.outputs.failed }}
    strategy:
      # We need every job in the matrix to finish so we can produce a full report.
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        shardTotal: [10]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm dlx playwright@1.54.2 install --only-shell --with-deps chromium
      - name: Download Baseline Screenshots
        uses: actions/download-artifact@v4
        with:
          name: baseline-screenshots
          path: ./dist/playwright-baseline-screenshots
      - name: Test
        id: test
        continue-on-error: true
        run: PLAYWRIGHT_SKIP_COVERAGE=true pnpm exec playwright test --config ./src/playwright/playwright.config.ts --project visuals --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}
      - name: Get "Test" Job Outcome
        id: get-test-job-outcome
        run: |
          if [ "${{ steps.test.outcome }}" == "failure" ]; then
            echo "failed=true" >> $GITHUB_OUTPUT
          fi
      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: visual-report-${{ matrix.shardIndex }}
          path: ./dist/playwright/test-report

  deploy-visual-report:
    name: Deploy Visual Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    needs:
      - test-visuals
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - name: Download Reports
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./dist/playwright/test-reports
          pattern: visual-report-*
      - name: Merge Reports
        run: |
          PLAYWRIGHT_HTML_ATTACHMENTS_BASE_URL=https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref  }}/visual-report/data/ PLAYWRIGHT_HTML_TITLE="Visual Report" pnpm exec playwright merge-reports --config ./src/playwright/playwright.config.ts --reporter html ./dist/playwright/test-reports
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Deploy Report
        run: aws s3 sync ./playwright-report s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref }}/visual-report --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@52423e01640425a022ef5fd42c6fb5f633a02728
        with:
          header: visual-report
          message: |+
            ## ${{ needs.test-visuals.outputs.failed && '⚠️' || '✅' }} Visual Report
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref }}/visual-report#?q=s:${{ needs.test-visuals.outputs.failed && 'failed+s:flaky' || 'passed' }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - install-dependencies
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/pnpm
      - run: pnpm start
        env:
          BASE_URL: ${{ github.head_ref }}
          NODE_ENV: production
      - name: Upload Storybook
        uses: actions/upload-artifact@v4
        with:
          name: storybook
          path: dist/storybook

  deploy-storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    # Both `github.head_ref` and `github.event.pull_request.head.ref` are empty when
    # a workflow is run in a merge queue. Take a look at the Deploy Storybook task
    # below. Because those variables will be empty, letting that task run in a merge
    # queue means the branch will be deployed to the root of R2 and thus to production.
    # The point of this job is the Deploy Storybook task. So we just skip the entire job.
    if: github.event_name != 'merge_group'

    needs:
      - build
    steps:
      # TODO: Remove after this is resolved: https://www.cloudflarestatus.com/incidents/t5nrjmpxc1cj
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.22.35.zip" -o "awscliv2.zip"
          echo "8119ccf67de875f39d386abea986738fa710be57e20d4df66fa99c7f7fd09997 awscliv2.zip" | sha256sum --check
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS CLI
        env:
          CLOUDFLARE_R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        # https://developers.cloudflare.com/r2/examples/aws/aws-cli
        run: |
          aws configure set region auto
          aws configure set output json
          aws configure set aws_access_key_id $CLOUDFLARE_R2_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $CLOUDFLARE_R2_SECRET_ACCESS_KEY
      - name: Download Storybook
        uses: actions/download-artifact@v4
        with:
          name: storybook
          path: storybook
      - name: Deploy Storybook
        run: aws s3 sync ./storybook s3://${{ vars.CLOUDFLARE_R2_BUCKET_NAME }}/${{ github.head_ref  }} --endpoint-url ${{ vars.CLOUDFLARE_R2_ENDPOINT }}
      - uses: marocchino/sticky-pull-request-comment@52423e01640425a022ef5fd42c6fb5f633a02728
        with:
          header: storybook
          message: |+
            ## Storybook
            https://${{ vars.CLOUDFLARE_CUSTOM_DOMAIN }}/${{ github.head_ref  }}
